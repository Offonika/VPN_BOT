# store.py
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import SessionLocal
from db.models import Router as RouterModel, User
from sqlalchemy import func
from datetime import datetime
import logging

router = Router()

@router.message(Command("store"))
async def show_store(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞."""
    logging.info("–•–µ–Ω–¥–ª–µ—Ä show_store —Å—Ä–∞–±–æ—Ç–∞–ª")
    session = SessionLocal()
    try:
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø–æ SKU –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –ø—Ä–æ–¥–∞–∂–µ
        routers = session.query(
            RouterModel.sku,
            RouterModel.model,
            func.count(RouterModel.id).label('quantity')
        ).filter(
            RouterModel.status == "available",
            RouterModel.is_for_sale == True
        ).group_by(
            RouterModel.sku,
            RouterModel.model
        ).all()

        if not routers:
            await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
        text = "üì¶ **–ú–∞–≥–∞–∑–∏–Ω —Ä–æ—É—Ç–µ—Ä–æ–≤**\n\n"
        for router_item in routers:
            text += f"**–ú–æ–¥–µ–ª—å**: {router_item.model}\n"
            text += f"**SKU**: {router_item.sku}\n"
            text += f"**–î–æ—Å—Ç—É–ø–Ω–æ**: {router_item.quantity} —à—Ç.\n\n"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="place_order")]
        ])

        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞.")
    finally:
        session.close()

@router.callback_query(lambda c: c.data == "place_order")
async def place_order(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    telegram_id = callback_query.from_user.id
    session = SessionLocal()

    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            return

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –ø—Ä–æ–¥–∞–∂–µ —Ä–æ—É—Ç–µ—Ä
        router_item = session.query(RouterModel).filter(
            RouterModel.status == "available",
            RouterModel.is_for_sale == True
        ).first()
        if not router_item:
            await callback_query.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–æ–¥–∞–Ω—ã.")
            return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        router_item.user_id = user.id
        router_item.status = "sold"
        router_item.sale_date = datetime.utcnow()
        session.commit()

        await callback_query.message.answer(
            f"–†–æ—É—Ç–µ—Ä {router_item.model} (SKU: {router_item.sku}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."
        )
    
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
    finally:
        session.close()
        await callback_query.answer()
